{"version":3,"sources":["index.js"],"names":["Validator","options","validator","resolveSchema","component","props","rules","schema","validate","value","valid","validity","errors","reduce","error","addState","isValid","createCustomValidity","customValidity","message","addFormat","addKeyword","getSchema","validateSchema","addMetaSchema","addSchema","removeSchema","errorsText"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;QASqBA,S;AAEjB,2BAAYC,OAAZ,EAAqB;AAAA;;AACjB,iBAAKC,SAAL,GAAiB,qBAAQD,OAAR,CAAjB;AACH;;4BAEDE,a,0BAAcC,S,EAAW;AAAA,mCACGA,UAAUC,KADb;AAAA,gBACdC,KADc,oBACdA,KADc;AAAA,gBACPC,MADO,oBACPA,MADO;;AAErB,mBAAOD,SAASC,MAAT,IAAmB,EAA1B;AACH,S;;4BAEDC,Q,qBAASC,K,EAAOL,S,EAAW;;AAEvB,gBAAMF,YAAY,KAAKA,SAAvB;;AAEA,gBAAMQ,QAAQR,UAAUM,QAAV,CAAmB,KAAKL,aAAL,CAAmBC,SAAnB,CAAnB,EAAkDK,KAAlD,CAAd;;AAEA,gBAAME,WAAW,2BAAjB;;AAEA,gBAAID,KAAJ,EAAW;AACP,uBAAOC,QAAP;AACH;;AAED,mCAAOT,UAAUU,MAAjB;;AAEA,mBAAOV,UAAUU,MAAV,CAAiBC,MAAjB,CACH,UAACF,QAAD,EAAWG,KAAX,EAAqB;AACjBH,yBAASI,QAAT,6BACOD,KADP;AAEIE,6BAAS;AAFb;AAIA,uBAAOL,QAAP;AACH,aAPE,EAQHA,QARG,CAAP;AAWH,S;;4BAEDM,oB,iCAAqBC,c,EAAgB;;AAEjC,gBAAMP,WAAW,2BAAjB;;AAEAA,qBAASI,QAAT,CAAkB;AACdC,yBAAS,CAACE,cADI;AAEdC,yBAASD;AAFK,aAAlB;;AAKA,mBAAOP,QAAP;AAEH,S;;4BAIDS,S,wBAAmB;AAAA;;AACf,+BAAKlB,SAAL,EAAekB,SAAf;AACH,S;;4BAEDC,U,yBAAoB;AAAA;;AAChB,gCAAKnB,SAAL,EAAemB,UAAf;AACH,S;;4BAEDC,S,wBAAmB;AACf,iBAAKA,SAAL;AACH,S;;4BAEDC,c,6BAAwB;AACpB,iBAAKA,cAAL;AACH,S;;4BAEDC,a,4BAAuB;AACnB,iBAAKA,aAAL;AACH,S;;4BAEDC,S,wBAAmB;AACf,iBAAKA,SAAL;AACH,S;;4BAEDC,Y,2BAAsB;AAClB,iBAAKA,YAAL;AACH,S;;4BAEDC,U,yBAAoB;AAChB,iBAAKA,UAAL;AACH,S;;;;;yBAnFgB3B,S","file":"index.js","sourcesContent":["/**\n * @file main entry file\n * @author ludafa(ludafa@outlook.com)\n */\n\nimport Validity from 'melon-core/validator/Validity';\nimport Ajv from 'ajv';\nimport locale from './locale/zh-CN';\n\nexport default class Validator {\n\n    constructor(options) {\n        this.validator = new Ajv(options);\n    }\n\n    resolveSchema(component) {\n        const {rules, schema} = component.props;\n        return rules || schema || {};\n    }\n\n    validate(value, component) {\n\n        const validator = this.validator;\n\n        const valid = validator.validate(this.resolveSchema(component), value);\n\n        const validity = new Validity();\n\n        if (valid) {\n            return validity;\n        }\n\n        locale(validator.errors);\n\n        return validator.errors.reduce(\n            (validity, error) => {\n                validity.addState({\n                    ...error,\n                    isValid: false\n                });\n                return validity;\n            },\n            validity\n        );\n\n    }\n\n    createCustomValidity(customValidity) {\n\n        const validity = new Validity();\n\n        validity.addState({\n            isValid: !customValidity,\n            message: customValidity\n        });\n\n        return validity;\n\n    }\n\n    // delegated methods from ajv validator\n\n    addFormat(...args) {\n        this.validator.addFormat(...args);\n    }\n\n    addKeyword(...args) {\n        this.validator.addKeyword(...args);\n    }\n\n    getSchema(...args) {\n        this.getSchema(...args);\n    }\n\n    validateSchema(...args) {\n        this.validateSchema(...args);\n    }\n\n    addMetaSchema(...args) {\n        this.addMetaSchema(...args);\n    }\n\n    addSchema(...args) {\n        this.addSchema(...args);\n    }\n\n    removeSchema(...args) {\n        this.removeSchema(...args);\n    }\n\n    errorsText(...args) {\n        this.errorsText(...args);\n    }\n\n}\n"]}